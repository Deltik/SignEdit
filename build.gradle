def name = 'SignEdit'
version '1.13.0'

/*
 * Copyright (C) 2017-2021 Deltik <https://www.deltik.org/>
 *
 * This file is part of SignEdit for Bukkit.
 *
 * SignEdit for Bukkit is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SignEdit for Bukkit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SignEdit for Bukkit.  If not, see <https://www.gnu.org/licenses/>.
 */

// Set to '+' to use latest Bukkit
// Otherwise, specify a version number like '1.13-R0.1-SNAPSHOT'
def bukkit_version = '1.13-R0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'application'

mainClassName = 'org.deltik.mc.signedit.SignEditPlugin'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven {
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
}

configurations {
    extraLibs
}

dependencies {
    implementation group: 'org.bukkit', name: 'bukkit', version: bukkit_version
    implementation 'com.intellij:annotations:+@jar' // Workaround for org.bukkit.bukkit version 1.13.2-R0.1-SNAPSHOT regression

    implementation group: 'com.google.dagger', name: 'dagger', version: '2.36'
    extraLibs group: 'com.google.dagger', name: 'dagger', version: '2.36'
    annotationProcessor group: 'com.google.dagger', name: 'dagger-compiler', version: '2.36'
    extraLibs group: 'javax.inject', name: 'javax.inject', version: '1'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.7.2'
    testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.10.0'
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }

    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDirs = ['test/resources']
        }
    }
}

jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

processResources {
    def expandProperties = [
            pluginName: name,
            pluginVersion: version,
            mainClassName: mainClassName,
    ]
    inputs.properties(expandProperties)
    with copySpec {
        from 'src/resources'
        expand(expandProperties)
        duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.guardsquare', name: 'proguard-gradle', version: '7.1.0-beta5'
    }
}

def proguardOutFile = rootProject.file("$buildDir/libs/release.jar")
def jarFile = jar.outputs.files.singleFile
task proguard(type: proguard.gradle.ProGuardTask) {
    configuration 'configuration.pro'

    injars  jarFile
    outjars proguardOutFile
    libraryjars configurations.findByName('runtimeClasspath').getFiles()
    // Java 8
    libraryjars "${System.getProperty("java.home")}/lib/rt.jar"
    // Java 9+ compatibility (requires JDK)
    libraryjars "${System.getProperty("java.home")}/jmods/java.base.jmod"
    libraryjars "${System.getProperty("java.home")}/jmods/java.desktop.jmod"
    libraryjars "${System.getProperty("java.home")}/jmods/java.logging.jmod"
    libraryjars "${System.getProperty("java.home")}/jmods/jdk.unsupported.jmod"
}

jar.finalizedBy proguard
proguard.doLast {
    if (!jarFile.delete()) throw new IllegalStateException()
    if (!proguardOutFile.renameTo(jarFile)) throw new IllegalStateException()
}